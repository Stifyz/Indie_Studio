material Test3 {
     technique {
                // Base ambient pass
                pass ambient {
                        // base colours, not needed for rendering, but as information
                        // to lighting pass categorisation routine
                        ambient 1 1 1
                        diffuse 0 0 0
                        specular 0 0 0 0
                        // Really basic vertex program
                        // NB we don't use fixed function here because GL does not like
                        // mixing fixed function and vertex programs, depth fighting can
                        // be an issue
                        vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture {
                                param_named_auto worldViewProj worldviewproj_matrix
                                param_named_auto ambient ambient_light_colour
                        }

                }
                // Now do the lighting pass
                // NB we don't do decal texture here because this is repeated per light
                pass perlight {
                        // base colours, not needed for rendering, but as information
                        // to lighting pass categorisation routine
                        ambient 0 0 0

                        // do this for each light
                        iteration once_per_light


                        scene_blend add

                        // Vertex program reference
                        vertex_program_ref Examples/BumpMapVP {
                                param_named_auto lightPosition light_position_object_space 0
                                param_named_auto worldViewProj worldviewproj_matrix
                        }

                        // Fragment program
                        fragment_program_ref Examples/BumpMapFP {
                                param_named_auto lightDiffuse light_diffuse_colour 0
                        }

                        // texture shadow receiver program
                        shadow_receiver_vertex_program_ref Examples/BumpMapVPShadowRcv {
                                param_named_auto lightPosition light_position_object_space 0
                                param_named_auto worldViewProj worldviewproj_matrix
                                param_named_auto worldMatrix world_matrix
                                param_named_auto texViewProj texture_viewproj_matrix
                        }
                        // Additive texture shadow receiver program
                        shadow_receiver_fragment_program_ref Examples/BumpMapFPShadowRcv {
                                param_named_auto lightDiffuse light_diffuse_colour 0
                        }

                        // Base bump map
                        texture_unit normalmap {
                                texture Dirt_darkE.png
                                colour_op replace
                        }
                }

                // Decal pass
                pass decal
                {
                        // base colours, not needed for rendering, but as information
                        // to lighting pass categorisation routine
                        lighting off
                        // Really basic vertex program
                        // NB we don't use fixed function here because GL does not like
                        // mixing fixed function and vertex programs, depth fighting can
                        // be an issue
                        vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture {
                                param_named_auto worldViewProj worldviewproj_matrix
                                param_named ambient float4 1 1 1 1
                        }
                        scene_blend dest_colour zero
                        texture_unit decalmap {
                                texture Dirt_dark_norm3.png
                        }

                }
        }

}

